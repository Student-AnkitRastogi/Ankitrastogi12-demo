//simple binary search
class Solution {
public:
    int specialArray(vector<int>& nums) {
        //sorting the array
        sort(nums.begin(),nums.end());
        int start = 0;
        int end = nums.size();

        while(start <= end) {
            int mid = start + (end - start)/2;
            int ans = count(nums , mid); 
            //If the count is less than mid, it means that mid is too large, so update right to mid.
            if(ans == mid) return mid;
            else if(ans > mid) start = mid + 1;
            else end = mid - 1;
        }
        return -1;
    }
    int count(vector<int> &nums, int target) {
        int ans = 0;
        for(int num : nums) {
            if(num >= target) ans++;
        }
        return ans;
    }
    //T.C = O(nlogn)
    //S.C = O(1)
};



//using brute force and binary search
class Solution {
public:
    int specialArray(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int l = 1,r = 100;
        //check loop condition
        while(l <= r)
        {
            int mid=l +(r - l)/2;
            int x=0;
            for(int i=0;i<nums.size();++i)
                x+=(nums[i]>=mid);
    
            if(x==mid)
                return x;
            if(x>mid)
                l=mid+1;
            else
                r=mid-1;
        }
        return -1;
    }
};
